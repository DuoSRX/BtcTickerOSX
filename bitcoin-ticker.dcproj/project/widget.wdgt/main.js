/*
 This file was generated by Dashcode.
 You may edit this file to customize your widget or web page
 according to the license.txt file included in the project.
 */

var tickerValues = {
    high: 0,
    low: 0,
    volume: 0,
    buy: 0,
    sell: 0,
    last: 0,
    currency: "usd"
};

var currencies = {
    usd: "$",
    cad: "$",
    gbp: "£",
    eur: "€",
    btc: "฿",
    jpn: "¥"
}

var sources = {
    mtGoxUsd: {
        name: "Mt. Gox USD",
        url: "https://data.mtgox.com/api/2/BTCUSD/money/ticker",
        fetchMethod: getMtGox
    },
    mtGoxCad: {
        name: "Mt. Gox CAD",
        url: "https://data.mtgox.com/api/2/BTCCAD/money/ticker",
        fetchMethod: getMtGox
    }
};

function getMtGox(url, callback) {
    $.getJSON(url, function(json) {
        callback({
            last: json.data.last.value,
            high: json.data.high.value,
            low: json.data.low.value,
            buy: json.data.buy.value,
            sell: json.data.sell.value,
            volume: json.data.vol.value,
            currency: json.data.high.currency,
            timestamp: json.data.now
        });
    });
}

function formatNumber(value, decimalPlaces) {
    parts = value.toString().split('.');
    if (decimalPlaces === 0) {
        return parts[0];
    }
    return parts[0] + "." + parts[1].substring(0, decimalPlaces);
}

function formatCurrency(value) {
    symbol = currencies[tickerValues.currency.toLowerCase()];
    return symbol + formatNumber(value, 2);
}

function refreshTickerValues() {
    var key = widget.preferenceForKey("sourceKey");
    if (!key) {
        key = $("#sourcePopup").val();
    }
    var source = sources[key];
    source.fetchMethod(source.url, function(data) {
        _.extend(tickerValues, data);
        showTickerValues();
    });
}

function showTickerValues() {
    $('#ticker_high').html(formatNumber(tickerValues.high, 2));
    $('#ticker_low').html(formatNumber(tickerValues.low, 2));
    $('#ticker_last').html(formatCurrency(tickerValues.last));
    $('#ticker_buy').html(formatNumber(tickerValues.buy, 2));
    $('#ticker_sell').html(formatNumber(tickerValues.sell, 2));
    $('#buyLabel').html(getLocalizedString('buy'));
    $('#sellLabel').html(getLocalizedString('sell'));
}

function populateSourcePicker() {
    var sourcePopup = $("#sourcePopup");
    _.each(sources, function(source, key) {
        $("<option>").text(source.name).attr("value", key).appendTo(sourcePopup);
    });
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();

    populateSourcePicker();
    $("#sourcePopup").change(function() {
        widget.setPreferenceForKey($(this).val(), "sourceKey");
        refreshTickerValues();
    }).val(widget.preferenceForKey("sourceKey"));

    refreshTickerValues();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    refreshTickerValues();
    $('#done div').innerText(getLocalizedString('done'));
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function onUpdateButtonClick(event)
{
    refreshTickerValues();
}
