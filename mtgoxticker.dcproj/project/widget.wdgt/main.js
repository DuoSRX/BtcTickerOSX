/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

var tickerUrl = "http://mtgox.com/code/data/ticker.php";
var tickerRequest = null;
var tickerValues = {
    high: 0,
    low: 0,
    vol: 0,
    buy: 0,
    sell: 0,
    last: 0
};

function refreshTickerValues()
{
    if (tickerRequest != null) {
        tickerRequest.abort();
        tickerRequest = null;
    }
    tickerRequest = new XMLHttpRequest();
    
    tickerRequest.onload = function(e) {  
        var data = JSON.parse(tickerRequest.responseText);
        tickerValues = data.ticker;
        showTickerValues();
        
        tickerRequest = null;
    }
    
    tickerRequest.open("GET", tickerUrl);
    tickerRequest.setRequestHeader("Cache-Control", "no-cache");
    
    tickerRequest.send(null);
}

function showTickerValues()
{
    document.getElementById('ticker_high').innerHTML = tickerValues.high;
    document.getElementById('ticker_low').innerHTML = tickerValues.low;
    document.getElementById('ticker_last').innerHTML = tickerValues.last;
    document.getElementById('ticker_volume').innerHTML = tickerValues.vol;
    document.getElementById('ticker_buy').innerHTML = tickerValues.buy;
    document.getElementById('ticker_sell').innerHTML = tickerValues.sell;
}

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
    refreshTickerValues();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
    refreshTickerValues();
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function onUpdateButtonClick(event)
{
    refreshTickerValues();
}
